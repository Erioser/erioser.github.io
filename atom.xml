<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半盏屠苏</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://erioser.github.io/"/>
  <updated>2019-06-27T02:35:31.610Z</updated>
  <id>https://erioser.github.io/</id>
  
  <author>
    <name>墨灵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>夏 （妈妈的文字 一 ）</title>
    <link href="https://erioser.github.io/p/5873.html"/>
    <id>https://erioser.github.io/p/5873.html</id>
    <published>2019-06-26T07:50:35.103Z</published>
    <updated>2019-06-27T02:35:31.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面的话：妈妈的文笔向来不错，带着一点点贾平凹先生的劲儿，又愿意闲暇时花点时间记录一些琐事，一字一句都像极了她的生活，读着这些句子，恍惚见觉得自己还在家乡，还在她的身边。她每每有了新的文字总是先要分享给我，以前自己总是收藏在微信中就又转头去忙活其他的事情了，都不肯及时给她一个反馈，可她还是乐此不疲的写了后发给我，想要将自己的文字第一时间分享给儿子。我自己也是喜欢写作的，私以为定是得了妈妈的文艺基因，可是却总腾不出一点儿的时间伏案写上几行，想到这就觉得羡慕妈妈现在轻松快乐的生活状态，佩服她想到就去做的脾气秉性。鉴于此，我准备将妈妈的文字整理一些发布出来，当做一个系列，标题不想配的很复杂，重要的是故事。</p></blockquote><p>​        <img src="http://ww1.sinaimg.cn/mw690/e6032bbely1g4es6lbtr0j23402c04qq.jpg" alt></p><p>​        三间房的红砖红瓦院落，方方正正，窗明几净。</p><p>​        时值盛夏，院子里的树荫似五把大小不一的绿伞，笼盖着小院，又与蓝天相间，斑斑驳驳，暖风袭来，犹如一副流动的画。</p><p>​        这几天，杏子出叶了，颜色也发生了变化，深绿变成浅黄中泛点淡绿。</p><p>​        地上分成不同的菜畦，高低不一，架豆、西红柿、茄子、辣椒在后排，前排是生菜、白菜。深绿、浅绿，黄绿也分深黄绿，浅黄绿。一阵风吹来，随风向摇摆，像绿色的波浪。</p><p>​        到了七、八月天，正是沙果成熟的时候，绿叶间露出数不清的黄沙果，个个是红脸蛋，伸手摘个甜的很，甜中略带酸味，还有香味。与它相对生长着的李子比它熟的早了些，红中透紫，紫中透红，轻咬一下满口都是汁水，伴着浓浓的香味，流到手上粘得手指都分不开，糖多呀，很甜很香！</p><p>​        地上的蔬菜相继熟了，自家的，肯定属于纯天然绿色的，总觉得哪里都比外地来的菜有味道，当然，最重要的是健康。</p><p>​        门台上摆了一排盆花，虽然都是普通的花，但也有主人对它们的爱，那些花好像也懂得报答似的，不时地冲你笑上一段时光，花开的盛，人笑的也欢。</p><p>​        在树荫下摆上方桌，一块瓷砖放在一个轮胎上当作简易饭桌，架上特制的铁盒，放上木炭，食材都是自制的：烤串、烤馒头片、烤辣椒，当然也少不了啤酒饮料。借着月光，伴着凉风，舒爽！这不就是农家自得之乐么？爱之深矣，言不足以表。<br>    <img src="http://ww1.sinaimg.cn/mw690/e6032bbely1g4estwd6o9j23402c07wi.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;写在前面的话：妈妈的文笔向来不错，带着一点点贾平凹先生的劲儿，又愿意闲暇时花点时间记录一些琐事，一字一句都像极了她的生活，读着这些句子，恍惚见觉得自己还在家乡，还在她的身边。她每每有了新的文字总是先要分享给我，以前自己总是收藏在微信中就又转头去忙活
      
    
    </summary>
    
      <category term="字里行间" scheme="https://erioser.github.io/categories/%E5%AD%97%E9%87%8C%E8%A1%8C%E9%97%B4/"/>
    
    
      <category term="散文" scheme="https://erioser.github.io/tags/%E6%95%A3%E6%96%87/"/>
    
      <category term="Text" scheme="https://erioser.github.io/tags/Text/"/>
    
      <category term="妈妈的文字" scheme="https://erioser.github.io/tags/%E5%A6%88%E5%A6%88%E7%9A%84%E6%96%87%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目前端优化方案</title>
    <link href="https://erioser.github.io/p/a74b.html"/>
    <id>https://erioser.github.io/p/a74b.html</id>
    <published>2019-06-24T06:08:14.842Z</published>
    <updated>2019-06-27T02:35:31.611Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>经过对项目结构 / 开发方式 / 技术架构的研究，再次提出部分可以优化的点。</p></blockquote><p>刚加入新公司之后，在学习来新公司的开发技术之后，就迫不及待的想要将自己过往的开发方式和技巧融合到现在的项目中，下面是针对目前项目的中一些技术点的改进思路</p><p>此方案主要由如下几点组成：</p><ol><li>代码编写规范</li><li>Api层抽离</li><li>Request工具更高效封装</li><li>路由分离配置方案</li><li>目录结构整理</li><li>数据请求优化</li><li>Mock数据配置</li></ol><p>方案在不断的编写过程中，其他内容还需大家共同努力发现，整理。</p><hr><h3 id="代码编写规范"><a href="#代码编写规范" class="headerlink" title="代码编写规范"></a>代码编写规范</h3><blockquote><p>良好的代码编写规范可以大幅度提高项目开发效率，增加代码的可读性/可维护性/可测试性，减少开发/重构等场景的复杂耗时程度。</p></blockquote><p>代码规范可以划分为构建规范/编写规范等方面，例如项目结构的搭建，说明文档的维护/模块的构建与命名/代码中注释与业务代码编写方式等方面都应该考虑到并设立统一的/较优的规则来进行约束，下面就进行简单说明：</p><h4 id="项目结构重构"><a href="#项目结构重构" class="headerlink" title="项目结构重构"></a>项目结构重构</h4><p>项目结构构建过程中，应该不断维护《目录结构说明文档》，并且建立项目结构版本，如：1.0.0，并且应该标注如下几点：</p><ol><li>结构中新建与改动过程的动作说明</li><li>项目结构版本信息</li></ol><h4 id="目录与模块文件命名"><a href="#目录与模块文件命名" class="headerlink" title="目录与模块文件命名"></a>目录与模块文件命名</h4><p>根据目前已经处于开发过程中的项目，整理部分规则如下：</p><ol><li><p>一般目录命名采用lowercase方式，，目录由多个单词组件则利用”-“连接，如：</p><p>router,</p><p>store, </p><p>components,</p><p>store/modules, </p><p>utils/dygraph-plugin</p></li><li><p>views中路由视图目录采用大驼峰形式命名，如：</p><p>views/Algorithms</p><p>views/Events</p><p>views/Monitor</p></li><li><p>工具模块， 基础业务模块文件采用lowercase方式，目录由多个单词组件则利用”-“连接，如：</p><p>bin/babel-external-helpers.js (babel中的命名方式)</p><p>store/modules/event.js</p></li><li><p>组件命名采用大驼峰方式命名，如：</p><p>AlgorithmsCenter.vue</p><p>AlgorithmsDdetail.vue</p></li></ol><p>具体命名方式可以参考<a href="https://cn.vuejs.org/v2/style-guide/" target="_blank" rel="noopener">Vue.js风格指南</a> 。</p><h4 id="代码编写规范-1"><a href="#代码编写规范-1" class="headerlink" title="代码编写规范"></a>代码编写规范</h4><p>代码编写过程中应遵守基本的开发规范准则，在这里只是给出部分建议。</p><p><strong>BEM（Block-Element-Modifier）结构命名方式</strong></p><p>HTML编写DOM结构并标时尽量遵守BEM命名方式，具体请参考文献：<a href="https://segmentfault.com/a/1190000012705634" target="_blank" rel="noopener">BEM–前端命名规范介绍</a>，<a href="https://segmentfault.com/a/1190000000391762" target="_blank" rel="noopener">BEM —— 源自Yandex的CSS 命名方法论</a>。</p><p>注意：没必要真的在每个地方都用上它，当某个节点不属于任何一个BEM范畴的时候，按照常规命名方式就可以。</p><p><strong>OOCSS（Object Oriented CSS）编写方式</strong></p><p>OOCSS（面向对象CSS编写）并不是什么新奇的技术，它想表明的其实就是我们可以将样式与固定的dom解耦，将一个或多个细小的css样式添加到需要它们的dom节点身上，目的其实还是为了提高代码的复用率，并且代码可读性也会有很大的提高，在项目中特别推荐使用BEM + OOCSS的开发方式，网上有很多结合使用指南，这里给大家提供一个非常简洁的<a href="https://segmentfault.com/a/1190000010529154" target="_blank" rel="noopener">CSS的组件化方案：OOCSS + BEM</a>。</p><p>Javascript规范可以参考Eslint中更多详细的规则，Google Javascript规范也是不错的选择，比如：</p><pre><code>1. 拒绝var 2.  使用空格代替tab 3.  优先使用箭头函数 4.  使用模版字符串代替连接字符串 5. ...</code></pre><p>这里提供给大家来自阿里的<a href="http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/index.html" target="_blank" rel="noopener">Kissy 最佳编码实践</a>。</p><p><strong>注释方式</strong></p><p>对于注释其实应该更加看重，好的注释可以大幅度提高代码的可读性。</p><p>HTML文档中应该对页面每一个Block的开始和结束进行注释说明，单独的Element也要标明，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;events-center&quot;&gt;</span><br><span class="line">  &lt;!-- 头部图表显示 start --&gt;</span><br><span class="line">  &lt;div class=&quot;top-chart&quot;&gt;</span><br><span class="line">  &lt;stacked-bar-chart :counts=&quot;eventCounts&quot; :color=&quot;eventColor&quot; @click=&quot;handleBarClick&quot;&gt;&lt;/stacked-bar-chart&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;!-- 头部图表显示 end --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 搜索与操作模块 start --&gt;</span><br><span class="line">  &lt;div class=&quot;toolbar horizontal background&quot;&gt;</span><br><span class="line">    &lt;!-- 搜索功能组件 --&gt;</span><br><span class="line">    &lt;cv-search :placeholder=&quot;helloWord&quot; v-model=&quot;query&quot;&gt;&lt;/cv-search&gt;</span><br><span class="line">    &lt;!-- 设置按钮 --&gt;</span><br><span class="line">    &lt;div v-if=&quot;!filterToggle&quot; @click=&quot;openFilter&quot; class=&quot;filter-icon&quot;&gt;&lt;icon-settings /&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 模式切换按钮 --&gt;</span><br><span class="line">    &lt;div v-if=&quot;!filterToggle&quot; @click=&quot;switchMode&quot; class=&quot;filter-icon&quot;&gt;&lt;icon-mode /&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 操作按钮组 start--&gt;</span><br><span class="line">    &lt;cv-button v-if=&quot;filterToggle&quot; kind=&quot;secondary&quot; @click=&quot;resetFilter&quot;&gt;重置&lt;/cv-button&gt;</span><br><span class="line">    &lt;cv-button v-if=&quot;filterToggle&quot; kind=&quot;secondary&quot; @click=&quot;cancelFilter&quot;&gt;取消&lt;/cv-button&gt;</span><br><span class="line">    &lt;cv-button v-if=&quot;filterToggle&quot; @click=&quot;confirmFilter&quot;&gt;确认&lt;/cv-button&gt;</span><br><span class="line">    &lt;!-- 操作按钮组 end--&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;!-- 搜索与操作模块 end --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS中也应该根据所编写的代码划分结构片段后注释，尽可能使用多行注释方式（/**/），如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/* css reset start*/</span><br><span class="line">*&#123;</span><br><span class="line">  box-sizing: border-box</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  background-color: #FFF;</span><br><span class="line">  font-family: MicrosoftYaHei, PingFangSC, Helvetica, Arial, sans-serif, &quot;宋体&quot;;</span><br><span class="line">&#125;</span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">/* elemnt-ui table 样式重置 */</span><br><span class="line">.el-table tr &#123;</span><br><span class="line">  background-color:  #f3f3f3;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p>JS中的注释希望能采用JSDoc推荐的方式，这样更有利于开发到某一阶段时，利用JSDoc工具直接生成关于该JS模块的文档，具体可以参考文档：<a href="http://www.dba.cn/book/jsdoc/JSDOCNeiLianBiaoQianINLINETAGS/LINK.html" target="_blank" rel="noopener">JSDoc在线文档</a>，<a href="https://www.html.cn/doc/jsdoc/about-namepaths.html" target="_blank" rel="noopener">JSDoc中文文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 为了演示JSDoc的示例模块.</span><br><span class="line"> * @module utils/jsdoc</span><br><span class="line"> * @see module:main.js</span><br><span class="line"> */ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/** 暴露 name */</span><br><span class="line">export const name = &apos;mixer&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 错误处理方法.</span><br><span class="line"> * @param &#123;object&#125; self - 调用方法的vue实例.</span><br><span class="line"> * @param &#123;object&#125; error - 错误对象.</span><br><span class="line"> * @param &#123;string&#125; errorMessage - 出错提醒信息.</span><br><span class="line"> * @return &#123;string&#125; 处理后的错误信息文本.</span><br><span class="line"> * @example</span><br><span class="line"> * errorTip(this, e, &apos;登陆失败&apos;)</span><br><span class="line"> */</span><br><span class="line">export function errorTip (self, error, errorMessage) &#123;</span><br><span class="line">  // 处理后的错误文本信息</span><br><span class="line">  let message = translate(error.message || error.msg || &apos;出错了，请重试&apos;)</span><br><span class="line">  console.log(error, message)</span><br><span class="line">  // 调用vue实例的消息提示方法</span><br><span class="line">  self.$message(&#123;</span><br><span class="line">    type: &apos;error&apos;,</span><br><span class="line">    message: errorMessage || message,</span><br><span class="line">    center: true,</span><br><span class="line">    duration: (error.message &amp;&amp; error.message.indexOf(&apos;Network Error&apos;) !== -1) ? 8000 : 3000</span><br><span class="line">  &#125;)</span><br><span class="line">  return message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 错误文本信息处理方法.</span><br><span class="line"> * @param &#123;string&#125; message - 原始的error对象中的报错信息.</span><br><span class="line"> * @return &#123;string&#125; 处理后的错误信息.</span><br><span class="line"> */</span><br><span class="line">function translate (message) &#123;</span><br><span class="line">  if (message.indexOf(&apos;timeout&apos;) !== -1) &#123;</span><br><span class="line">    return &apos;请求超时&apos;</span><br><span class="line">  &#125; else if (message.indexOf(&apos;Network Error&apos;) !== -1) &#123;</span><br><span class="line">    return &apos;网络错误&apos;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return &apos;出错了，请重试&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成文档的方式：</p><ol><li><p>下载jsdoc-to-markdown 可以将文档输出为markdown</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jsdoc-to-markdown</span><br></pre></td></tr></table></figure></li><li><p>配置scripts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;docs&quot;: &quot;jsdoc2md lib/*.js &gt; api.md&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run docs</span><br></pre></td></tr></table></figure></li></ol><p>即可将lib下所有的js文件根据jsdoc规范生成到api.md中。</p><hr><h3 id="Request工具高效封装"><a href="#Request工具高效封装" class="headerlink" title="Request工具高效封装"></a>Request工具高效封装</h3><p>针对axios进行了更高效的封装，比如设置了拦截器，在数据请求回来后就可以根据请求结果的状态进行失败处理等等。</p><p>config/axios.config.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * axios 配置模块</span><br><span class="line"> * @module config/axios.config</span><br><span class="line"> * @see utils/request</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">import qs from &apos;qs&apos;;</span><br><span class="line">/**</span><br><span class="line"> *  axios具体配置对象</span><br><span class="line"> * @description 包含了基础路径/请求前后对数据对处理，自定义请求头的设置等</span><br><span class="line"> */</span><br><span class="line">const axiosConfig = &#123;</span><br><span class="line">    baseURL: process.env.RESTAPI_PREFIX,</span><br><span class="line">    // 请求前的数据处理</span><br><span class="line">    transformRequest: [function (data) &#123;</span><br><span class="line">        return data;</span><br><span class="line">    &#125;],</span><br><span class="line">    // 请求后的数据处理</span><br><span class="line">    transformResponse: [function (data) &#123;</span><br><span class="line">        return data;</span><br><span class="line">    &#125;],</span><br><span class="line">    // 自定义的请求头</span><br><span class="line">    headers: &#123;</span><br><span class="line">        &apos;X-Requested-With&apos;: &apos;XMLHttpRequest&apos;,</span><br><span class="line">        &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 查询对象序列化函数</span><br><span class="line">    paramsSerializer: function (params) &#123;</span><br><span class="line">        return qs.stringify(params);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 超时设置s</span><br><span class="line">    timeout: 10000,</span><br><span class="line">    // 跨域是否带Token 项目中加上会出错</span><br><span class="line">    // withCredentials: true, </span><br><span class="line">    // 自定义请求处理</span><br><span class="line">    // adapter: function(resolve, reject, config) &#123;&#125;,</span><br><span class="line">    // 响应的数据格式 json / blob /document /arraybuffer / text / stream</span><br><span class="line">    responseType: &apos;json&apos;,</span><br><span class="line">    // xsrf 设置</span><br><span class="line">    xsrfCookieName: &apos;XSRF-TOKEN&apos;,</span><br><span class="line">    xsrfHeaderName: &apos;X-XSRF-TOKEN&apos;,</span><br><span class="line">    // 下传和下载进度回调</span><br><span class="line">    onUploadProgress: function (progressEvent) &#123;</span><br><span class="line">        Math.round(progressEvent.loaded * 100 / progressEvent.total);</span><br><span class="line">    &#125;,</span><br><span class="line">    onDownloadProgress: function (progressEvent) &#123;</span><br><span class="line">        Math.round(progressEvent.loaded * 100 / progressEvent.total);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 最多转发数，用于node.js</span><br><span class="line">    maxRedirects: 5,</span><br><span class="line">    // 最大响应数据大小</span><br><span class="line">    maxContentLength: 2000,</span><br><span class="line">    // 自定义错误状态码范围</span><br><span class="line">    validateStatus: function (status) &#123;</span><br><span class="line">        return status &gt;= 200 &amp;&amp; status &lt; 300;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 用于node.js</span><br><span class="line">    // httpAgent: new http.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line">    // httpsAgent: new https.Agent(&#123; keepAlive: true &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">/** 导出配置模块 */</span><br><span class="line">export default axiosConfig;</span><br></pre></td></tr></table></figure><p>utils/request.js(目前使用的是restapi.js):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 业务中使用的ajax请求工具模块</span><br><span class="line"> * @module utils/request</span><br><span class="line"> * @see main.js</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line">import config from &apos;../config/axios.config&apos;;</span><br><span class="line">import qs from &apos;querystring&apos;</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import &#123; errorTip &#125; from &apos;utils/common&apos;</span><br><span class="line"></span><br><span class="line">// 用来调用errorTip的vue实例</span><br><span class="line">const vueInstance = new Vue()</span><br><span class="line"></span><br><span class="line">// 构建得的请求对象</span><br><span class="line">const request = axios.create(config);</span><br><span class="line">// 返回状态判断(添加响应拦截器)</span><br><span class="line">request.interceptors.response.use(</span><br><span class="line">    res =&gt; &#123;</span><br><span class="line">        // 如果数据请求失败</span><br><span class="line">        if ( res.data.code  &gt; 300 ) &#123;</span><br><span class="line">          errorTip(vueInstance, res.data)</span><br><span class="line">          return Promise.reject(res.data);</span><br><span class="line">        &#125;</span><br><span class="line">        return res.data.data;</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        return Promise.reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">request.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">    let allowMethods = [&apos;post&apos;];</span><br><span class="line">    if (allowMethods.indexOf(config.method) !== -1) &#123;</span><br><span class="line">        config.headers[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</span><br><span class="line">        config.data = qs.stringify(config.data);</span><br><span class="line">    &#125;</span><br><span class="line">    return config;</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 对axios的实例重新封装成一个plugin ,方便 Vue.use(xxxx)</span><br><span class="line">export default request;</span><br></pre></td></tr></table></figure><hr><h3 id="Api抽离"><a href="#Api抽离" class="headerlink" title="Api抽离"></a>Api抽离</h3><p>在src开发目录中建立api目录结构，在其中可以集中构建所有请求动作的模块，以便调用。</p><p>api/index.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * api接口调用维护模块</span><br><span class="line"> * @module api</span><br><span class="line"> * @see main</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">  import request from &apos;utils/request&apos;</span><br><span class="line">  import Vue from &apos;vue&apos;</span><br><span class="line">  import &#123; errorTip &#125; from &apos;utils/common&apos;</span><br><span class="line">  </span><br><span class="line">  // 用来调用errorTip的vue实例</span><br><span class="line">  const vueInstance = new Vue()</span><br><span class="line">  </span><br><span class="line">  /** </span><br><span class="line"> * 分页获取算法列表</span><br><span class="line"> * @param &#123;Object&#125; [p] pageInfo  页码相关信息</span><br><span class="line"> * @param &#123;number&#125; [p.page] page 页数</span><br><span class="line"> * @param &#123;number&#125; [p.size] size 每页数据个数</span><br><span class="line"> * @param &#123;string&#125; [p.labels] labels 标签</span><br><span class="line"> * @param &#123;string&#125; [p.query] query 查询条件</span><br><span class="line"> * @return &#123;Promise&#125; request 请求动作promise</span><br><span class="line">  */</span><br><span class="line">  export let apiGetList = (&#123;page = 1, size = 10, labels = &apos;anomaly&apos;, query = &apos;&apos;&#125; = &#123;&#125;) =&gt; &#123;</span><br><span class="line">    return request.get(`/algorithm?page=$&#123;page&#125;&amp;labels=$&#123;labels&#125;&amp;size=$&#123;size&#125;&amp;query=$&#123;query&#125;`).catch(error =&gt; errorTip(vueInstance, error))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="数据请求动作优化"><a href="#数据请求动作优化" class="headerlink" title="数据请求动作优化"></a>数据请求动作优化</h3><p>利用async await对请求作出优化处理，在需要调用请求的地方利用async/await来规避回调函数的嵌套。</p><p>store/modules/setting.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123; apiGetList &#125; from &apos;api&apos;</span><br><span class="line">// ...</span><br><span class="line">actions: &#123;</span><br><span class="line">    // 分页获取算法列表 当前写法</span><br><span class="line">    getList: (&#123; commit &#125;, &#123;page = 1, size = 10, labels = &apos;anomaly&apos;, query = &apos;&apos;&#125; = &#123;&#125;) =&gt; &#123;</span><br><span class="line">      return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        restapi.request(&#123;</span><br><span class="line">          method: &apos;get&apos;,</span><br><span class="line">          url: `/algorithm?page=$&#123;page&#125;&amp;labels=$&#123;labels&#125;&amp;size=$&#123;size&#125;&amp;query=$&#123;query&#125;`,</span><br><span class="line">          success: sdata =&gt; &#123;</span><br><span class="line">            commit(&apos;LIST_ALGORITHMS&apos;, sdata)</span><br><span class="line">            resolve(sdata)</span><br><span class="line">          &#125;,</span><br><span class="line">          error: reject</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 分页获取算法列表 重构后写法</span><br><span class="line">    getListTest: async (&#123; commit &#125;, params) =&gt; &#123;</span><br><span class="line">      let sdata = await apiGetList(params)</span><br><span class="line">      commit(&apos;LIST_ALGORITHMS&apos;, sdata)</span><br><span class="line">    &#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图中调用方式基本区别不大，不需要再做请求错误处理。</p><p>views/Algorithms/AlgorithmsCenter.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">...mapActions(&apos;algorithm&apos;, [</span><br><span class="line">  &apos;getList&apos;,</span><br><span class="line">  &apos;getListTest&apos;,</span><br><span class="line">  &apos;getCount&apos;</span><br><span class="line">]),</span><br><span class="line">// ...</span><br><span class="line">getAlgorithmsList (&#123;start = 1, length = 10&#125; = &#123;&#125;) &#123;</span><br><span class="line">// this.getList(&#123;page: Math.ceil(start / length), size: length, labels: this.algoType&#125;).catch(error =&gt; errorTip(this, error)) // 当前调用方式</span><br><span class="line">this.getListTest(&#123;page: Math.ceil(start / length), size: length, labels: this.algoType&#125;)// 重构后调用方式</span><br><span class="line">&#125;</span><br><span class="line">// ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Mock数据搭建"><a href="#Mock数据搭建" class="headerlink" title="Mock数据搭建"></a>Mock数据搭建</h3><blockquote><p>mock数据的搭建有利于在前后端开发进度不同步的情况下进行模拟数据请求，就可以根据请求完成前端的交互逻辑，合理的配置可以在有真实接口后稍作更改就可以调用线上真实接口，处理手法更平滑。</p></blockquote><p>Mock的搭建有很多种方式，在这里推荐使用json-server的使用方式，本质就是利用json-server快捷的启动一个mock服务器，然后在config/index/dev/proxyTable中代理请求到mock服务器即可。</p><p>具体配置过程可以参考 <a href="https://www.cnblogs.com/fly_dragon/p/9150732.html" target="_blank" rel="noopener">json-server配置详解</a></p><p>其实<a href="https://easy-mock.com/" target="_blank" rel="noopener">EasyMock</a>这个网站也提供来便利的mock数据的方式，不再需要自己去搭建mock环境，简直是非常棒了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;经过对项目结构 / 开发方式 / 技术架构的研究，再次提出部分可以优化的点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刚加入新公司之后，在学习来新公司的开发技术之后，就迫不及待的想要将自己过往的开发方式和技巧融合到现在的项目中，下面是针对目前项目
      
    
    </summary>
    
      <category term="技术文章" scheme="https://erioser.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="Vue" scheme="https://erioser.github.io/tags/Vue/"/>
    
      <category term="Technology" scheme="https://erioser.github.io/tags/Technology/"/>
    
      <category term="优化" scheme="https://erioser.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
